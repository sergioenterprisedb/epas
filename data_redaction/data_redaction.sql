-- Connect to database edb user enterprisedb
\c edb enterprisedb

-- Drop table employees if exists
DROP TABLE IF EXISTS employees;

-- DROP USERS if exists
DROP USER IF EXISTS queen;
DROP USER IF EXISTS freddie;
DROP USER IF EXISTS brian;
DROP USER IF EXISTS roger;
DROP USER IF EXISTS john;

-- Create table employees
CREATE TABLE employees (
 id          integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
 name        varchar(40) NOT NULL,
 ssn         varchar(11) NOT NULL,
 phone       varchar(10),
 birthday    date,
 salary      money,
 email       varchar(100)
);
 
-- Insert some data
INSERT INTO employees (name, ssn, phone, birthday, salary, email)
VALUES
( 'Freddie Mercury', '020-78-9345', '5081234567', '1946-09-05', 100000000.00, 'freddie.mercury@queen.com'),
( 'Brian May', '123-33-9345', '6171234567', '1947-07-19', 90000000.00, 'brian.may@queen.com'),
( 'Roger Taylor', '123-33-9345', '6171234567', '1949-07-26', 90000000.00, 'roger.taylor@queen.com'),
( 'John Deacon', '123-89-9345', '9781234567','1951-08-19', 50000000, 'john.deacon@queen.com');
 
-- Create a user hr who can see all the data in employees
CREATE USER queen;

-- Create a normal user
CREATE USER freddie;
CREATE USER brian;
CREATE USER roger;
CREATE USER john;

-- Grants
GRANT ALL ON employees TO queen, freddie, brian, roger, john;
 
-- Create redaction function in which actual redaction logic resides
CREATE OR REPLACE FUNCTION redact_ssn (ssn varchar(11)) RETURN varchar(11) IS
BEGIN
   /* replaces 020-12-9876 with xxx-xx-9876 */
   return overlay (ssn placing 'xxx-xx' from 1) ;
END;

-- Create redaction function for salary column
CREATE OR REPLACE FUNCTION redact_salary () RETURN money IS BEGIN return 0::money; END;

-- Create policy
CREATE REDACTION POLICY redact_policy_personal_info ON employees FOR (session_user != 'queen')
ADD COLUMN ssn USING redact_ssn(ssn) WITH OPTIONS (SCOPE query, EXCEPTION equal),
ADD COLUMN salary USING redact_salary();

-- Unit test with HR user
\c edb queen
table employees;

-- Unit test with FREDDIE user
\c edb freddie
table employees;

-- Unit test with BRIAN user
\c edb brian
table employees;

-- Unit test with ROGER user
\c edb roger
table employees;

-- Unit test with JOHN user
\c edb john
table employees;


